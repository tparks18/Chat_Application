{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","title","people","map","person","keys","Object","key","index","lastMessageKey","isMyMessage","width","renderMessages","height","Modal","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","LoginForm","ReactDOM","render","document","getElementById"],"mappings":"0MAyDeA,EArDK,SAACC,GACjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACQC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MAEVC,EAAe,SAACC,GAClBA,EAAMC,iBAEN,IAAMC,EAAOP,EAAMQ,OAEhBD,EAAKE,OAAS,GAAGC,YAAYP,EAAOD,EAAQ,CAAEK,SAEjDN,EAAS,KAab,OACI,uBAAMU,UAAU,eAAeC,SAAUR,EAAzC,UACI,uBACIO,UAAU,gBACVE,YAAY,oBACZb,MAAOA,EACPc,SAhBS,SAACT,GAClBJ,EAASI,EAAMU,OAAOf,OAEtBgB,YAASlB,EAAOI,IAcRU,SAAUR,IAEd,uBAAOa,QAAQ,gBAAf,SACI,sBAAMN,UAAU,eAAhB,SACI,cAACO,EAAA,EAAD,CAAiBP,UAAU,qBAGnC,uBACIQ,KAAK,OACLC,UAAU,EACVC,GAAG,gBACHC,MAAO,CAAEC,QAAS,QAClBT,SAvBS,SAACT,GAClBK,YAAYP,EAAOD,EAAQ,CAAEsB,MAAOnB,EAAMU,OAAOS,MAAOjB,KAAM,QAwB1D,wBAAQY,KAAK,SAASR,UAAU,cAAhC,SACI,cAACc,EAAA,EAAD,CAAcd,UAAU,oBC9BzBe,EApBG,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QACjB,OAAU,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBnB,QAAS,EAE1B,qBACIoB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJpB,UAAU,gBACVW,MAAO,CAAEU,MAAO,WAMxB,qBAAKrB,UAAU,UAAUW,MAAO,CAAEU,MAAO,QAASC,YAAa,OAAQC,MAAO,QAASC,gBAAiB,WAAxG,SACMR,EAAQpB,QCeP6B,EA7BM,SAAC,GAA8B,IAAD,IAA3BC,EAA2B,EAA3BA,YAAaV,EAAc,EAAdA,QAC3BW,GAAwBD,GAAeA,EAAYE,OAAOC,WAAab,EAAQY,OAAOC,SAC5F,OACI,sBAAK7B,UAAU,cAAf,UACM2B,GACG,qBACG3B,UAAU,iBACVW,MAAO,CAACmB,gBAAgB,OAAD,cAASd,QAAT,IAASA,GAAT,UAASA,EAASY,cAAlB,aAAS,EAAiBG,OAA1B,SAGtB,OAAPf,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBnB,QAAS,EAEzB,qBACIoB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJpB,UAAU,gBACVW,MAAO,CAAEqB,WAAYL,EAAuB,MAAM,UAGtD,qBAAK3B,UAAU,UAAUW,MAAO,CAAEU,MAAO,OAAQG,gBAAiB,WAAlE,SACKR,EAAQpB,WC+ClBqC,EA9DE,SAAC9C,GACd,IAAQ+C,EAA0C/C,EAA1C+C,MAAOC,EAAmChD,EAAnCgD,WAAYC,EAAuBjD,EAAvBiD,SAAUC,EAAalD,EAAbkD,SAE/BC,EAAOJ,GAASA,EAAMC,GAuC5B,OAAIG,EAGA,sBAAKtC,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,gBAA6BsC,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAMC,QACnC,qBAAKvC,UAAU,gBAAf,SACKsC,EAAKE,OAAOC,KAAI,SAACC,GAAD,iBAAgBA,EAAOA,OAAOb,kBAjCxC,WACnB,IAAMc,EAAOC,OAAOD,KAAKN,GAEzB,OAAOM,EAAKF,KAAI,SAACI,EAAKC,GAClB,IAAM9B,EAAUqB,EAASQ,GACnBE,EAA0B,GAATD,EAAa,KAAOH,EAAKG,EAAQ,GAClDE,EAAcZ,GAAYpB,EAAQY,OAAOQ,SAE/C,OACI,sBAA0BzB,MAAO,CAAEsC,MAAO,QAA1C,UACI,qBAAKjD,UAAU,gBAAf,SAEQgD,EACE,cAAC,EAAD,CAAWhC,QAASA,IACpB,cAAC,EAAD,CAAcA,QAASA,EAASU,YAAaW,EAASU,OAGhE,qBAAK/C,UAAU,gBAAgBW,MAAO,CAAEW,YAAa0B,EAAc,OAAS,MAAOhB,WAAYgB,EAAc,MAAQ,QAArH,SACeA,MATnB,cAAiBF,OA2BpBI,GACD,qBAAKvC,MAAO,CAAEwC,OAAQ,WACtB,qBAAKnD,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAiBb,GAAjB,IAAwBI,OAAQ4C,UAb3B,c,yCCCNiB,EA3CD,WACZ,MAAgChE,mBAAS,IAAzC,mBAAOyC,EAAP,KAAiBwB,EAAjB,KACA,EAAgCjE,mBAAS,IAAzC,mBAAOkE,EAAP,KAAiBC,EAAjB,KACA,EAA0BnE,mBAAS,IAAnC,mBAAOoE,EAAP,KAAcC,EAAd,KAEMhE,EAAY,uCAAG,WAAOiE,GAAP,eAAAC,EAAA,6DACnBD,EAAE/D,iBAEIiE,EAAa,CAAE,aAAc,uCAAwC,YAAa/B,EAAU,cAAeyB,GAH9F,kBAMXO,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IAN7C,OAQjBI,aAAaC,QAAQ,WAAYpC,GACjCmC,aAAaC,QAAQ,WAAYX,GAEjCY,OAAOC,SAASC,SAChBX,EAAS,IAZQ,kDAcjBA,EAAS,qCAdQ,0DAAH,sDAkBlB,OACE,qBAAKzD,UAAU,UAAf,SACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,uBAAMC,SAAUR,EAAhB,UACE,uBAAOe,KAAK,OAAOnB,MAAOwC,EAAU1B,SAAU,SAACuD,GAAD,OAAOL,EAAYK,EAAEtD,OAAOf,QAAQW,UAAU,QAAQE,YAAY,WAAWmE,UAAQ,IACnI,uBAAO7D,KAAK,WAAWnB,MAAOiE,EAAUnD,SAAU,SAACuD,GAAD,OAAOH,EAAYG,EAAEtD,OAAOf,QAAQW,UAAU,QAAQE,YAAY,WAAWmE,UAAQ,IACvI,qBAAKC,MAAM,SAAX,SACE,wBAAQ9D,KAAK,SAASR,UAAU,SAAhC,SACE,yDAIN,6BAAKwD,UCpBEe,G,MAdH,WACR,OAAIP,aAAaQ,QAAQ,YAGzB,cAAC,IAAD,CACErB,OAAO,QACPsB,UAAU,uCACVrC,SAAU4B,aAAaQ,QAAQ,YAC/BE,WAAYV,aAAaQ,QAAQ,YACjCG,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OARL,cAACC,EAAD,MCHjDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fc4ac5dc.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons'\n\nconst MessageForm = (props) => {\n    const [value, setValue] = useState('');\n    const { chatId, creds } = props;\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        \n        const text = value.trim();\n\n        if(text.length > 0) sendMessage(creds, chatId, { text });\n\n        setValue('');\n    }\n    \n    const handleChange = (event) => {\n        setValue(event.target.value);\n        \n        isTyping(props, chatId);\n    }\n\n    const handleUpload = (event) => {\n        sendMessage(creds, chatId, { files: event.target.files, text: '' })\n    }\n\n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <input\n                className=\"message-input\"\n                placeholder=\"Send a message...\"\n                value={value}\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n            />\n            <label htmlFor=\"upload-button\">\n                <span className=\"image-button\">\n                    <PictureOutlined className=\"picture-icon\" />\n                </span>\n            </label>\n            <input\n                type=\"file\"\n                multiple={false}\n                id=\"upload-button\"\n                style={{ display: 'none' }}\n                onChange={handleUpload} \n            />\n            <button type=\"submit\" className=\"send-button\" >\n                <SendOutlined className=\"send-icon\" />\n            </button>\n        </form>\n    );\n\n}\n\nexport default MessageForm;","const MyMessage = ({ message }) => {\n    if(message?.attachments?.length > 0) {\n        return (\n            <img\n                src={message.attachments[0].file}\n                alt=\"message-attachment\"\n                className=\"message-image\"\n                style={{ float: 'right' }}\n            />\n        )\n    }\n\n    return (\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\n             {message.text}\n        </div>\n    );\n\n}\n\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n    return (\n        <div className=\"message-row\">\n             {isFirstMessageByUser && (\n                 <div \n                    className=\"message-avatar\"\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\n                 />\n             )}\n             {message?.attachments?.length > 0 \n                ? (\n                    <img\n                        src={message.attachments[0].file}\n                        alt=\"message-attachment\"\n                        className=\"message-image\"\n                        style={{ marginLeft: isFirstMessageByUser ? '4px':'48px' }}\n                    />\n                ) : (\n                    <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC' }}>\n                        {message.text}\n                    </div>\n                )\n            }\n        </div>\n    );\n\n}\n\nexport default TheirMessage;","import { render } from 'react-dom';\nimport MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\nconst ChatFeed = (props) => {\n    const { chats, activeChat, userName, messages } = props;\n\n    const chat = chats && chats[activeChat];\n\n    const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n    const renderMessages = () => {\n        const keys = Object.keys(messages);\n\n        return keys.map((key, index) => {\n            const message = messages[key];\n            const lastMessageKey = index == 0 ? null : keys[index - 1];\n            const isMyMessage = userName == message.sender.userName;\n\n            return (\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\n                    <div className=\"message-block\">\n                        {\n                            isMyMessage\n                            ? <MyMessage message={message} />\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\n                        }\n                    </div>\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\n                        {(message, isMyMessage)}\n                    </div>\n\n                </div>\n            )\n        })\n    }\n\n    if(!chat) return 'Loading...';\n\n    return (\n        <div className=\"chat-feed\">\n            <div className=\"chat-title-container\">\n                <div className=\"chat-title\">{chat?.title}</div>\n                <div className=\"chat-subtitle\">\n                    {chat.people.map((person) => ` ${person.person.username}`)}\n                </div>\n            </div>\n            {renderMessages()}\n            <div style={{ height: '100px' }} />\n            <div className=\"message-form-container\">\n                <MessageForm {...props} chatId={activeChat} />\n            </div>\n        </div>\n    );\n\n}\n\nexport default ChatFeed;","import { useState } from 'react';\nimport axios from 'axios';\n\nconst projectId = '1b7801d6-8a66-4be4-a442-89219d833dfc';\n\nconst Modal = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const authObject = { 'Project-ID': 'b6a7514f-00b5-4fff-9f31-15a4da0e89fb', 'User-Name': username, 'User-Secret': password };\n\n    try {\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n\n      window.location.reload();\n      setError('');\n    } catch (err) {\n      setError('Oops, wrong password or username.');\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">Chat Application</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span>Start Chatting</span>\n            </button>\n          </div>\n        </form>\n        <h1>{error}</h1>\n      </div>\n    </div>\n\n  );\n};\n\nexport default Modal;","import { ChatEngine } from \"react-chat-engine\";\n\nimport ChatFeed from \"./components/ChatFeed\";\nimport LoginForm from \"./components/LoginForm\";\n\nimport \"./App.css\";\n\nconst App = () => {\n    if(!localStorage.getItem('username')) return <LoginForm />\n\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID=\"b6a7514f-00b5-4fff-9f31-15a4da0e89fb\"\n      userName={localStorage.getItem('username')}\n      userSecret={localStorage.getItem('password')}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n    />\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}